"""
Django settings for proyectoCritica project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path  # Importa la clase Path para trabajar con rutas de archivo.
import os  # Importa el módulo os para interactuar con el sistema operativo.


# Construcción de rutas dentro del proyecto.
BASE_DIR = Path(__file__).resolve().parent.parent  # Define la ruta base del proyecto.


# Configuración de desarrollo rápido - no es adecuada para producción.
# Ver https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

SECRET_KEY = 'django-insecure-f4064#=(+h50po0sjb=%7($7q8-xyp!#9^7i24*5^4ib-usn(^'  # Clave secreta utilizada en producción.

DEBUG = True  # Configura el modo debug (debe ser False en producción).
ALLOWED_HOSTS = []  # Lista de hosts permitidos, vacía en desarrollo.


# Definición de aplicaciones instaladas.
INSTALLED_APPS = [
    'django.contrib.admin',  # Admin de Django.
    'django.contrib.auth',  # Sistema de autenticación de Django.
    'django.contrib.contenttypes',  # Manejo de tipos de contenido en Django.
    'django.contrib.sessions',  # Gestión de sesiones.
    'django.contrib.messages',  # Gestión de mensajes de usuario.
    'django.contrib.staticfiles',  # Archivos estáticos.
    'core',  # Aplicación core del proyecto.
    'database',  # Aplicación para la base de datos.
    'crispy_forms',  # Biblioteca para formularios más bonitos.
    'crispy_bootstrap4',  # Estilos crispy con Bootstrap 4.
]

# Middleware para procesar las solicitudes HTTP.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Middleware de seguridad.
    'django.contrib.sessions.middleware.SessionMiddleware',  # Middleware de sesiones.
    'django.middleware.common.CommonMiddleware',  # Middleware común.
    'django.middleware.csrf.CsrfViewMiddleware',  # Middleware para protección CSRF.
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Middleware para autenticación.
    'django.contrib.messages.middleware.MessageMiddleware',  # Middleware de mensajes.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Middleware para prevenir clickjacking.
]

ROOT_URLCONF = 'proyectoCritica.urls'  # Configura las URLs del proyecto.

# Configuración de plantillas de Django.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Backend para renderizar plantillas Django.
        'DIRS': [],  # Lista de directorios donde buscar plantillas.
        'APP_DIRS': True,  # Habilita la búsqueda de plantillas dentro de las aplicaciones.
        'OPTIONS': {
            'context_processors': [  # Procesadores de contexto para cargar información adicional en las plantillas.
                'django.template.context_processors.debug',  # Contexto de depuración.
                'django.template.context_processors.request',  # Contexto de solicitud.
                'django.contrib.auth.context_processors.auth',  # Contexto de autenticación.
                'django.contrib.messages.context_processors.messages',  # Contexto de mensajes.
            ],
        },
    },
]

WSGI_APPLICATION = 'proyectoCritica.wsgi.application'  # Configuración de la aplicación WSGI.

# Configuración de la base de datos.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Usa SQLite como motor de base de datos.
        'NAME': BASE_DIR / 'db.sqlite3',  # Ruta del archivo de base de datos.
    }
}

# Validadores de contraseñas.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Validador de similitud de atributos de usuario.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Validador de longitud mínima de contraseña.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Validador de contraseñas comunes.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Validador de contraseñas numéricas.
    },
]

# Configuración de internacionalización.
LANGUAGE_CODE = 'es-es'  # Código de idioma español (España).
TIME_ZONE = 'America/santiago'  # Zona horaria de Santiago, Chile.
USE_I18N = True  # Habilita la internacionalización.
USE_TZ = True  # Habilita el uso de zonas horarias.

# Configuración de archivos estáticos (CSS, JavaScript, imágenes).
STATIC_URL = 'static/'  # Ruta para acceder a archivos estáticos.

# Configuración para la clave primaria de los modelos.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Usa BigAutoField como clave primaria por defecto.

# Configuración de URL y ruta de archivos multimedia.
MEDIA_URL = '/media/'  # URL para acceder a archivos multimedia.
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # Ruta donde se almacenarán los archivos multimedia.

# Variables de redirección para login y logout.
LOGIN_REDIRECT_URL = 'home'  # Redirige a la página de inicio después de iniciar sesión.
LOGOUT_REDIRECT_URL = 'home'  # Redirige a la página de inicio después de cerrar sesión.

# Configuración de crispy-forms con Bootstrap 4.
CRISPY_TEMPLATE_PACK = 'bootstrap4'  # Establece el pack de plantillas crispy para usar Bootstrap 4.


# Looking to send emails in production? Check out our Email API/SMTP product!
EMAIL_HOST = 'sandbox.smtp.mailtrap.io'
EMAIL_HOST_USER = 'f7642f16bcf916'
EMAIL_HOST_PASSWORD = ''
EMAIL_PORT = '2525'